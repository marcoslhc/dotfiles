# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson
'atom-text-editor[data-grammar~="lisp"]':
    'tab': 'lisp-paredit:indent'

# Stop emmet from hijacking tab from snippets and autocomplete
'atom-text-editor.autocomplete-active:not([mini])':
  'tab': 'autocomplete-plus:confirm'

# Stop emmet from hijacking tab from snippet tab stops
'atom-text-editor[data-grammar="text html basic"]:not([mini]),
 atom-text-editor[data-grammar~="jade"]:not([mini]),
 atom-text-editor[data-grammar~="css"]:not([mini]),
 atom-text-editor[data-grammar~="sass"]:not([mini])':
  'tab': 'snippets:next-tab-stop'

# Emmet for JSX
'atom-text-editor[data-grammar~="jsx"]:not([mini])':
  'tab': 'emmet:expand-abbreviation-with-tab'

'atom-text-editor[data-grammar~="js"]:not([mini])':
  'tab': 'emmet:expand-abbreviation-with-tab'

# Allows using enter to select an autocomplete suggestion.
'.platform-darwin atom-text-editor[data-grammar~="clojure"].autocomplete-active':
  'enter':          'autocomplete-plus:confirm'

'.platform-darwin atom-text-editor[data-grammar~="clojure"]':

  # Indent the current selection
  'cmd-i':          'lisp-paredit:indent'

  # Expand the selection up a block
  'ctrl-shift-m':   'lisp-paredit:expand-selection'

  # Provides proper indentation when enter is pressed.
  # (I disable normal lisp-paredit keybindings)
#  Override newline back to original for proto-repl
  'enter':          'lisp-paredit:newline'

  # Helpers for cutting, copying, pasting, deleting, and indenting a
  # Clojure code
  'cmd-shift-x':    'jason:cut-sexp'
  'cmd-shift-c':    'jason:copy-sexp'
  'cmd-shift-v':    'jason:paste-sexp'
  'cmd-shift-delete': 'jason:delete-sexp'
  'cmd-shift-d':    'jason:delete-sexp'
  'cmd-shift-i':    'jason:indent-top-sexp'


# Miscellaneous helpers. Less applicable to clojure code. (optional)
'.platform-darwin atom-workspace atom-text-editor':
  'alt-up': 'editor:move-line-up'
  'alt-down': 'editor:move-line-down'
  'cmd-alt-down': 'editor:duplicate-lines'
  'cmd-d': 'editor:delete-line'
  'ctrl-s':'tree-view:toggle'
  'cmd-e': 'find-and-replace:select-next'
  'cmd-alt-ctrl-w': 'editor:toggle-soft-wrap'
  'alt-backspace': 'editor:delete-to-previous-word-boundary'
  'alt-delete': 'editor:delete-to-next-word-boundary'
  'ctrl-d': 'proto-repl:exit-repl'
  'cmd-l':  'go-to-line:toggle'
  'ctrl-l': 'proto-repl:clear-repl'
